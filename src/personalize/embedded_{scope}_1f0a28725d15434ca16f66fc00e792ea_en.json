{
  "clientKey": "84c3696ed849ab686bb60d0058523ef9",
  "href": "https://api-us.boxever.com/v3/flowDefinitions/d70bbae5-5e13-4c29-9143-ec4954756f28",
  "ref": "d70bbae5-5e13-4c29-9143-ec4954756f28",
  "name": "embedded_{scope}_1f0a28725d15434ca16f66fc00e792ea_en",
  "modifiedByRef": "Ub7x6sEoPLwXjVuenV6Knbn8KanIQMNf@clients",
  "modifiedAt": "2024-09-17T17:47:15.682Z",
  "revision": 2,
  "archived": false,
  "friendlyId": "embedded_{scope}_1f0a28725d15434ca16f66fc00e792ea_en",
  "type": "INTERACTIVE_API_FLOW",
  "subtype": "EXPERIENCE",
  "channels": [
    "WEB"
  ],
  "triggers": [],
  "dashboardLinks": [],
  "tags": [],
  "businessProcess": "interactive_v1",
  "traffic": {
    "type": "audienceTraffic",
    "weightingAlgorithm": "USER_DEFINED",
    "modifiedAt": "2024-09-17T17:47:15.807Z",
    "splits": [
      {
        "template": "{\"variantId\": \"74a578c5d932491e9daf7037fccf5080\"}",
        "variantName": "Snowboarders",
        "audienceName": "Snowboarders",
        "conditionGroups": [
          {
            "conditions": [
              {
                "templateId": "number_of_page_views",
                "params": {
                  "has": "has",
                  "second number": "0",
                  "page": "snowboarder",
                  "x": "14",
                  "compares to": "is greater than",
                  "number of views": "3"
                }
              }
            ]
          }
        ]
      }
    ]
  },
  "variants": [],
  "transpiledVariants": [
    {
      "ref": "76df02b9-4e90-4a76-bf5e-8624a87b0537",
      "name": "Snowboarders",
      "tasks": [
        {
          "implementation": "templateRenderTask",
          "input": {
            "inputType": "templateRenderTaskInput",
            "type": "application/json",
            "template": "{\"variantId\": \"74a578c5d932491e9daf7037fccf5080\"}"
          }
        },
        {
          "implementation": "conditionsTask",
          "input": {
            "inputType": "conditionsTaskInput",
            "rules": [
              {
                "id": "scriptCondition",
                "name": "Combined condition groups",
                "description": "Combined templates within condition group for targeted experience",
                "ruleData": {
                  "expression": "(function () {\n    var visited = \"has\";\n    var pageName = \"snowboarder\";\n    var compareValue = \"is greater than\";\n    var numberDays = 14;\n    var numberViews1 = 3;\n    var numberViews2 = 0;\n    var expectedSessionType = \"WEB\";\n    var expectedEventType = \"VIEW\";\n    var numPageViews = 0;\n    var actualDate = new Date(Date.now());\n    var lastViewPageDate;\n    var pageConditionMet = false;\n\n    if (guest && guest.sessions && guest.sessions.length > 0) {\n        loop:\n        for (var i = 0; i < guest.sessions.length; i++) {\n            if (guest.sessions[i]) {\n                if (guest.sessions[i].sessionType !== expectedSessionType) {\n                    continue loop;\n                } else if (guest.sessions[i].events) {\n                    for (var j = 0; j < guest.sessions[i].events.length; j++) {\n                        var eventData = guest.sessions[i].events[j].arbitraryData;\n                        var eventType = guest.sessions[i].events[j].type;\n\n                        if (eventData && eventData.page && eventType === expectedEventType) {\n                            var viewedpage = eventData.page;\n                            if (viewedpage === pageName) {\n                                var creationDate = guest.sessions[i].events[j].createdAt;\n                                if (creationDate) {\n                                    var date = new Date(creationDate);\n                                    var timePassed = actualDate.getTime() - date.getTime();\n                                    var daysPassed = Math.floor(timePassed / (1000 * 3600 * 24));\n                                    if (daysPassed <= numberDays) {\n                                        numPageViews++;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (compareValue === 'is between') {\n            pageConditionMet = numPageViews >= numberViews1 && numPageViews <= numberViews2;\n        } else {\n            if (compareValue === 'is equal to') {\n               pageConditionMet = numPageViews === numberViews1; \n            } else if (compareValue === 'is greater than') {\n                pageConditionMet = numPageViews > numberViews1;\n            } else if (compareValue === 'is less than') {\n                pageConditionMet = numPageViews < numberViews1;\n            } else if (compareValue === 'is greater than or equal to') {\n                pageConditionMet = numPageViews >= numberViews1;\n            } else if (compareValue === 'is less than or equal to') {\n                pageConditionMet = numPageViews <= numberViews1;\n            }\n        }\n    }\n    \n    return (visited === \"has\" && pageConditionMet) || (visited === \"has not\" && !pageConditionMet);\n})();"
                }
              }
            ]
          }
        }
      ]
    }
  ],
  "status": "PRODUCTION",
  "schedule": {
    "type": "simpleSchedule",
    "startDate": "2024-06-17T19:14:59.301Z"
  },
  "revisions": {
    "href": "https://api-us.boxever.com/v3/flowDefinitions/d70bbae5-5e13-4c29-9143-ec4954756f28/revisions"
  },
  "sampleSizeConfig": {
    "baseValue": 0.15,
    "minimumDetectableDifference": 0.02,
    "confidenceLevel": 0.95
  },
  "notificationEnabled": false
}
